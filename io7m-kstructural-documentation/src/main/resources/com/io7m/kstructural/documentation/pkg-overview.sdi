[section [title Orientation] [id pkg.orientation]]
[subsection [title Overview]]
[paragraph]
The [term [type package] structural] language is a syntactically
lightweight language for writing technical documentation.

[subsection [title Metadata] [id pkg.orientation.meta]]
[paragraph]
The [term [type package] structural] language allows for tagging of terms
with [term [type term] metadata]. For example, in this document, every
reference to the name [term [type package] structural] is tagged with
[term [type constant] "\"package\""]. Individual terms within a document
are given semantic meaning. The available tags are entirely user-defined: The
language merely provides a way to apply tags, but does not define any tags
of its own.

[subsection [title Semantic Simplicity]]
[paragraph]
The [term [type package] structural] language currently defines around
twenty elements. The language is trivial to learn, the number of possible
permutations of elements is low, and the output is predictable.

[subsection [title Lightweight Syntax]]
[paragraph]
The [term [type package] structural] language defines an abstract model for
documents as an algebraic data type. It then defines multiple formats, all of
which compile down to the same internal model. The canonical format is defined in
terms of [term [type term] s-expressions] and can be parsed at a basic level
by any standard s-expression parser. An XML format with a full RELAX-NG schema
is provided for legacy compatibility. Additionally, an
[term [type term] imperative] format is provided that allows for syntax
that is only slightly more heavyweight than [term [type term] Markdown] whilst
still allowing for the same control over
[link [target pkg.orientation.meta] metadata] and document structure. Documents
may freely combine elements written in any of the formats via the standard
[link [target pkg.orientation.modular] import] mechanism
[footnote-ref pkg.orientation.import_xml].

[subsection [title Portability]]
[paragraph]
The [term [type package] kstructural] implementation is written primarily
in the [link-ext [target "http://http://kotlinlang.org/"] Kotlin] language
using APIs defined in Java 8. The implementation can therefore execute on
any JVM supporting Java 8 and above. This also means that the language can
be used to generate documentation as part of the build process for Java
based projects without having to assume the existence of any platform-specific
native binaries.

[subsection [title Specification]]
[paragraph]
The [term [type package] structural] language is carefully and unambiguously
specified as an executable Haskell specification.

[subsection [title Modular Documents] [id pkg.orientation.modular]]
[paragraph]
The [term [type package] structural] language supports modular documents with
a simple import system: Documents may import elements or raw text from files,
so large technical manuals can be cleanly separated into files based on logical
content. Intra-document links are fully supported and full referential integrity
checks are performed to ensure that links always point to elements that actually
exist.

[subsection [title Comparison With Other Systems]]
[paragraph]
The [link-ext [target "http://docbook.org"] DocBook] system is similar
to [term [type package] structural] in that it allows for metadata within a
document. DocBook, however, takes a different approach in that it defines
elements for all of the things that authors may be expected to talk about
in technical documentation. For example, if an author wants to tag a name
as being the name of a software package, the name has to be contained within
a [link-ext [target "http://docbook.org/tdg5/en/html/package.html"] package]
element. In terms of semantic simplicity, the sheer number of defined elements
and the resulting possible permutations of elements mean that it is difficult
to make the case that DocBook is in any way [term [type term] simple]. In the
author's experience, there are many combinations of elements in DocBook that
are valid according to the schema but cannot actually be used in practice
because the resulting XHTML output becomes ugly or difficult to style in a
useful manner. DocBook is, however, strongly and unambiguously specified: If
a document is well-formed XML, it can be machine-checked against the published
schema and it is immediately known whether or not the document is valid.
DocBook also allows for modular documents via the standard XML
[link-ext [target https://www.w3.org/TR/xinclude/] XInclude] mechanism.
Unfortunately, due to DocBook being defined in XML, writing documents using it
can be an exercise in physical stamina. XML is notorious for being syntactically
heavyweight and really requires editor support to avoid causing repetitive
strain injury.

[paragraph]
[link-ext [target "http://daringfireball.net/projects/markdown/"] Markdown] was
originally designed as a trivial text format intended for quick conversion to
HTML. Additionally, Markdown is intended to be readable without processing.
Unfortunately, the original description of Markdown has numerous ambiguities,
meaning that almost every implementation of the format differs
in important ways. It was also designed with the incredibly poorly thought out
idea that no document should be considered invalid; every mistake simply causes
silent failure or corrupted output. It offers absolutely no standard way to
incorporate metadata into documents: Terms may be marked as being bold, italic,
or monospace, and very little else. It offers no way to make documents modular,
and most implementations require the user to manually concatenate their documents
into one large file before passing it to the Markdown processor. An attempt has
been made to formalize a compatible common subset of Markdown into a system
known as [link-ext [target "http://commonmark.org/"] CommonMark]. Unfortunately,
after two years, the compatible subset is still rather poorly specified and
contains almost none of the features of any existing implementation such as
footnotes and intra-document links [footnote-ref pkg.orientation.markdown_foot].

[formal-item [title Feature Comparison]]
[table
  [summary Comparison with other systems]
  [type comparison]
  [head
    [name ]
    [name structural]
    [name DocBook]
    [name Markdown]]
  [body
    [row
      [cell Metadata]
      [cell [term [type comparison_yes] Yes]]
      [cell [term [type comparison_yes] Yes]]
      [cell [term [type comparison_no] No]]]
    [row
      [cell Semantic Simplicity]
      [cell [term [type comparison_yes] Yes]]
      [cell [term [type comparison_no] No]]
      [cell [term [type comparison_yes] Yes]]]
    [row
      [cell Lightweight Syntax]
      [cell [term [type comparison_yes] Yes]]
      [cell [term [type comparison_no] No]]
      [cell [term [type comparison_yes] Yes]]]
    [row
      [cell Well-Specified]
      [cell [term [type comparison_yes] Yes]]
      [cell [term [type comparison_yes] Yes]]
      [cell [term [type comparison_no] No]]]
    [row
      [cell Portability]
      [cell [term [type comparison_yes] Yes]]
      [cell [term [type comparison_yes] Yes]]
      [cell [term [type comparison_maybe] Maybe] [footnote-ref pkg.orientation.markdown_port]]]
    [row
      [cell Modular Documents]
      [cell [term [type comparison_yes] Yes]]
      [cell [term [type comparison_yes] Yes]]
      [cell [term [type comparison_no] No]]]]]

[footnote [id pkg.orientation.markdown_foot]]
Users of Markdown are resigned to the fact that they are writing documents in
an implementation-specific dialect of Markdown because there is no other
alternative. This is an incredibly poor long-term strategy.

[footnote [id pkg.orientation.markdown_port]]
There are Markdown implementations for most languages. However, there may not
be an implementation that supports the specific dialect the author has used.

[footnote [id pkg.orientation.import_xml]]
Although elements written in the XML format cannot import non-XML elements due
to limitations with [link-ext [target https://www.w3.org/TR/xinclude/] XInclude].